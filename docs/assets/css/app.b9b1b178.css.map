{"version":3,"sources":["webpack:///src/src/App.vue","app.b9b1b178.css","webpack:///src/components/src/components/Camera.vue","webpack:///src/views/src/views/Home.vue"],"names":[],"mappings":"AAoOA,KACA,oDAAA,CACA,kCAAA,CACA,iCAAA,CACA,iBAAA,CACA,aCjOA,CDoOA,WACA,UClOA,CDqOA,gBACA,gBCnOA,CDqOA,YACA,cCnOA,CDsOA,cACA,UAAA,CACA,gBCpOA,CCkOA,iCACA,eD9NA,CCgOA,wCACA,UAAA,CACA,eD9NA,CCgOA,wBACA,cD9NA,CCiOA,yCACA,wBACA,eD/NA,CACA,CEdA,oBACA,eFkBA,CEhBA,oBACA,oBAAA,CACA,SFkBA,CEhBA,oBACA,oBAAA,CACA,aFkBA,CEhBA,mBACA,aFkBA","file":"app.b9b1b178.css","sourcesContent":["<template>\n  <div id=\"app\">\n    <b-nav>\n      <b-nav-item>\n        <router-link to=\"/\">Camera</router-link>\n      </b-nav-item>\n      <b-nav-item>\n        <router-link to=\"/gallery\">Gallery</router-link>\n      </b-nav-item>\n\n      <b-nav-item class=\"ml-auto\">\n        <div v-b-tooltip.hover title=\"Settings are required to upload photos.\">\n          <b-button class=\"settings\" v-b-modal.modal-prevent-closing>\n            <i class=\"fas fa-cog\"></i>\n          </b-button>\n\n          <b-modal\n            id=\"modal-prevent-closing\"\n            ref=\"modal\"\n            title=\"Cloudinary Upload Info\"\n            @show=\"resetModal\"\n            @hidden=\"resetModal\"\n            @ok=\"handleOk\"\n          >\n            <form ref=\"form\" @submit.stop.prevent=\"updateSettings\">\n              <b-form-group\n                :state=\"cloudnameState\"\n                label=\"Cloudname\"\n                label-for=\"cloud-name-input\"\n                invalid-feedback=\"Cloudname is required\"\n              >\n                <b-form-input\n                  id=\"cloud-name-input\"\n                  v-model=\"cloudname\"\n                  :state=\"cloudnameState\"\n                  required\n                ></b-form-input>\n              </b-form-group>\n              <b-form-group\n                :state=\"presetState\"\n                label=\"Preset\"\n                label-for=\"preset-input\"\n                invalid-feedback=\"Preset is required\"\n              >\n                <b-form-input id=\"preset-input\" v-model=\"preset\" :state=\"presetState\" required></b-form-input>\n              </b-form-group>\n              <b-form-group>\n                <b-form-checkbox\n                  id=\"clearsettings\"\n                  v-model=\"clearsettings\"\n                  name=\"clearsettings\"\n                  value=\"true\"\n                  unchecked-value=\"false\"\n                >Clear Settings</b-form-checkbox>\n              </b-form-group>\n            </form>\n          </b-modal>\n        </div>\n      </b-nav-item>\n    </b-nav>\n    <!-- <nav class=\"navbar navbar-light bg-light justify-content-between\">\n      <div>\n        <div v-on:click=\"toCamera\" class=\"brand\">Camera</div>\n      </div>\n      <div>\n        <div v-on:click=\"toGallery\" class=\"gallery-link\">Gallery</div>\n      </div>\n\n      <div>\n        <b-button v-b-modal.modal-prevent-closing>\n          <i class=\"settings fas fa-cog\"></i>\n        </b-button>\n\n        <b-modal\n          id=\"modal-prevent-closing\"\n          ref=\"modal\"\n          title=\"Cloudinary Upload Info\"\n          @show=\"resetModal\"\n          @hidden=\"resetModal\"\n          @ok=\"handleOk\"\n        >\n          <form ref=\"form\" @submit.stop.prevent=\"updateSettings\">\n            <b-form-group\n              :state=\"cloudnameState\"\n              label=\"Cloudname\"\n              label-for=\"cloud-name-input\"\n              invalid-feedback=\"Cloudname is required\"\n            >\n              <b-form-input\n                id=\"cloud-name-input\"\n                v-model=\"cloudname\"\n                :state=\"cloudnameState\"\n                required\n              ></b-form-input>\n            </b-form-group>\n            <b-form-group\n              :state=\"presetState\"\n              label=\"Preset\"\n              label-for=\"preset-input\"\n              invalid-feedback=\"Preset is required\"\n            >\n              <b-form-input id=\"preset-input\" v-model=\"preset\" :state=\"presetState\" required></b-form-input>\n            </b-form-group>\n            <b-form-group>\n              <b-form-checkbox\n                id=\"clearsettings\"\n                v-model=\"clearsettings\"\n                name=\"clearsettings\"\n                value=\"true\"\n                unchecked-value=\"false\"\n              >Clear Settings</b-form-checkbox>\n            </b-form-group>\n          </form>\n        </b-modal>\n      </div>\n    </nav>-->\n    <!-- <Home :cloudname=\"cloudname\" :preset=\"preset\" /> -->\n    <router-view></router-view>\n  </div>\n</template>\n\n<script>\nimport { mapState } from \"vuex\";\nimport { mapActions } from \"vuex\";\n\nexport default {\n  name: \"app\",\n  created: function() {\n    // if (this.$ls.get(\"cloudname\")) {\n    //   this.cloudname = this.$ls.get(\"cloudname\");\n    //   console.log(\"App.vue cloudname\", this.cloudname);\n    // }\n    // if (this.$ls.get(\"preset\")) {\n    //   this.preset = this.$ls.get(\"preset\");\n    // }\n    console.log(\"App created\", this.cloudname, this.preset);\n  },\n  data() {\n    return {\n      // cloudname: \"\",\n      cloudnameState: null,\n      // preset: \"\",\n      presetState: null,\n      clearsettings: \"false\",\n      expire: 3600000\n    };\n  },\n  // computed: mapState(['settings']),\n  computed: {\n    cloudname: {\n      get() {\n        return this.$store.state.settings.cloudname;\n      },\n      set(value) {\n        this.$store.commit(\"updateCloudname\", value);\n      }\n    },\n    preset: {\n      get() {\n        return this.$store.state.settings.preset;\n      },\n      set(value) {\n        this.$store.commit(\"updatePreset\", value);\n      }\n    }\n  },\n  methods: {\n    checkFormValidity() {\n      // const valid = this.$refs.form.checkValidity();\n      // this.cloudnameState = valid ? \"valid\" : \"invalid\";\n      // return valid;\n      return true;\n    },\n    resetModal() {\n      // this.cloudname = this.$ls.get(\"cloudname\", \"\");\n      // this.updateCloudname(cloudname)\n      this.cloudnameState = null;\n      // this.preset = this.$ls.get(\"preset\", \"\");\n      this.presetState = null;\n    },\n    handleOk(bvModalEvt) {\n      // Prevent modal from closing\n      bvModalEvt.preventDefault();\n      // Trigger submit handler\n      this.handleSubmit();\n    },\n    handleSubmit() {\n      //clear local storage and return\n      if (this.clearsettings === \"true\") {\n        // this.$ls.clear();\n        this.cloudname = \"\";\n        this.preset = \"\";\n        this.clearsettings = \"false\";\n        // this.$emit(\"update-ls\", {\n        //   cloudname: this.cloudname,\n        //   preset: this.preset\n        // });\n\n        this.$nextTick(() => {\n          this.$refs.modal.hide();\n        });\n        return;\n      } else {\n        // Exit when the form isn't valid\n        if (!this.checkFormValidity()) {\n          console.log(\"settings data not valid\");\n          return;\n        }\n      }\n\n      // update local storage\n      // this.$ls.set(\"cloudname\", this.cloudname, this.expire);\n      // this.$ls.set(\"preset\", this.preset, this.expire);\n      // this.$emit(\"update-ls\", {\n      //   cloudname: this.cloudname,\n      //   preset: this.preset\n      // });\n\n      // Hide the modal manually\n      this.$nextTick(() => {\n        this.$refs.modal.hide();\n      });\n    }\n  }\n};\n</script>\n\n<style>\n#app {\n  font-family: \"Roboto\", \"Avenir\", Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  /* margin-top: 60px;  */\n}\na.settings {\n  color: black;\n}\n\nbutton.settings {\n  padding: 6px 12px;\n}\n.settings i {\n  font-size: 1rem;\n}\n\n.nav-item a a {\n  color: black;\n  font-size: 1.5rem;\n}\n</style>\n","\n#app {\n  font-family: \"Roboto\", \"Avenir\", Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  /* margin-top: 60px;  */\n}\na.settings {\n  color: black;\n}\nbutton.settings {\n  padding: 6px 12px;\n}\n.settings i {\n  font-size: 1rem;\n}\n.nav-item a a {\n  color: black;\n  font-size: 1.5rem;\n}\n\n\nbutton[data-v-b68e1754]:disabled {\n  background: gray;\n}\nselect option[data-v-b68e1754]:disabled {\n  color: gray;\n  font-weight: bold;\n}\nselect[data-v-b68e1754] {\n  margin: 0.2rem 0;\n}\n@media only screen and (max-width: 400px) {\nbutton[data-v-b68e1754] {\n    font-size: 0.6rem;\n}\n}\n\n\nh3[data-v-095759b6] {\n  margin: 40px 0 0;\n}\nul[data-v-095759b6] {\n  list-style-type: none;\n  padding: 0;\n}\nli[data-v-095759b6] {\n  display: inline-block;\n  margin: 0 10px;\n}\na[data-v-095759b6] {\n  color: #42b983;\n}\n\n\n/*# sourceMappingURL=app.b9b1b178.css.map*/","<template>\n  <div class=\"camera\">\n    <div>\n      <b-button-group>\n        <b-button :disabled=\"!isStartEnabled\" v-on:click=\"start\">Start</b-button>\n        <b-button :disabled=\"isStartEnabled\" v-on:click=\"stop\">Stop</b-button>\n        <b-button :disabled=\"isStartEnabled\" v-on:click=\"snapshot\">Snapsot</b-button>\n        <b-button :disabled=\"!isPhoto\" v-on:click=\"download\">Downlolad</b-button>\n        <b-button\n          :disabled=\"!isPhoto || settings.cloudname.length === 0 || settings.preset.length === 0\"\n          v-on:click=\"upload\"\n        >Upload</b-button>\n      </b-button-group>\n    </div>\n    <form class>\n      <b-form-select\n        v-model=\"selectedDevice\"\n        :options=\"options\"\n        v-on:change=\"deviceChange()\"\n        size=\"sm\"\n      ></b-form-select>\n    </form>\n\n    <div id=\"container\">\n      <video playsinline autoplay></video>\n      <canvas></canvas>\n    </div>\n    <!-- <form id=\"upload-form\" class=\"upload-form\">\n      <input type=\"text\" name=\"cloud-name\" value=\"picturecloud7\" placeholder=\"Enter cloud name\" />\n      <input type=\"text\" name=\"preset\" value=\"bp_test_1\" placeholder=\"Enter upload preset\" />\n      <button type=\"submit\">Upload</button>\n    </form>\n    <div id=\"gallery\" />-->\n  </div>\n</template>\n\n<script>\nasync function uploadToCloudinary(cloudName, preset, fileData) {\n  try {\n    let fd = new FormData();\n    fd.append(\"upload_preset\", preset);\n    fd.append(\"tags\", \"browser_upload\"); // Optional - add tag for image admin in Cloudinary\n    fd.append(\"file\", fileData);\n    let res = await axios({\n      method: \"post\",\n      url: `https://api.cloudinary.com/v1_1/${cloudName}/upload`,\n      data: fd\n    });\n    // console.log(res);\n    return await res.data;\n  } catch (err) {\n    console.log(\"error upload:\", err);\n  }\n}\n\n// import cloudinary from \"cloudinary-core\";\nimport axios from \"axios\";\nimport { mapState } from \"vuex\";\n\nexport default {\n  name: \"Camera\",\n  data() {\n    return {\n      video: null,\n      canvas: null,\n      fileData: null,\n      isStartEnabled: true,\n      isPhoto: false,\n      stream: null,\n      currentStream: null,\n      devices: [],\n      options: [],\n      constraints: {},\n      selectedDevice: 0\n      // cloudname: '',\n      // preset:''\n    };\n  },\n  computed: mapState([\"settings\"]),\n  methods: {\n    upload: function() {\n      console.log(\"upload\");\n\n      if (\n        this.settings.cloudname.length === 0 ||\n        this.settings.preset.length === 0\n      ) {\n        console.log(\"error: upload missing cloudname or preset\");\n        this.$bvToast.toast(\n          `Upload to Cloudinary unsuccessful: use settings to provide cloudname and preset`,\n          {\n            title: \"Cloudinary Upload\",\n            autoHideDelay: 5000,\n            appendToast: false\n          }\n        );\n        return;\n      }\n      let data = uploadToCloudinary(\n        this.settings.cloudname,\n        this.settings.preset,\n        this.fileData\n      );\n\n      this.$bvToast.toast(`Upload to Cloudinary successful`, {\n        title: \"Cloudinary Upload\",\n        autoHideDelay: 5000,\n        appendToast: false\n      });\n    },\n    snapshot: function() {\n      console.log(\"snapshot\");\n      this.canvas.width = this.video.videoWidth;\n      this.canvas.height = this.video.videoHeight;\n      this.canvas\n        .getContext(\"2d\")\n        .drawImage(this.video, 0, 0, this.canvas.width, this.canvas.height);\n      this.fileData = this.canvas.toDataURL(\"image/jpeg\");\n      this.isPhoto = true;\n    },\n    stop: function() {\n      console.log(\"stop\");\n      this.video.pause();\n      if (this.currentStream) {\n        this.currentStream.getTracks().forEach(track => {\n          track.stop();\n        });\n        this.video.srcObject = null;\n      }\n\n      this.video.removeAttribute(\"src\");\n      this.video.load();\n      this.canvas\n        .getContext(\"2d\")\n        .clearRect(0, 0, this.canvas.width, this.canvas.height);\n      this.isStartEnabled = true;\n      this.isPhoto = false;\n    },\n    start: function() {\n      console.log(\"start\");\n      this.stop();\n      this.getMedia();\n      this.isStartEnabled = false;\n    },\n    download: function() {\n      console.log(\"downlaod\");\n      if (this.fileData) {\n        console.log(\"download\");\n        this.canvas.width = this.video.videoWidth;\n        this.canvas.height = this.video.videoHeight;\n        this.canvas\n          .getContext(\"2d\")\n          .drawImage(this.video, 0, 0, this.canvas.width, this.canvas.height);\n        let a = document.createElement(\"a\");\n        a.href = this.fileData;\n        a.textContent = \"photo\";\n        a.target = \"_blank\";\n        a.download = \"photo.jpeg\";\n        document.querySelector(\"body\").append(a);\n        a.click();\n      }\n    },\n    getMedia: async function() {\n      try {\n        this.stream = await navigator.mediaDevices.getUserMedia(\n          this.constraints\n        );\n        window.stream = this.stream;\n        // this.video.srcObject = stream\n        this.currentStream = stream;\n        this.video.srcObject = stream;\n      } catch (err) {\n        console.log(\"getmedia\", err);\n      }\n    },\n    deviceChange: function(){\n      this.getMedia()\n      this.isStartEnabled = false\n    },\n    setConstraints: function() {\n      const videoContstraints = {};\n      if (this.selectedDevice === 0) {\n        videoContstraints.facingMode = \"environment\";\n      } else {\n        videoContstraints.deviceId = {\n          exact: this.selectedDevice.value\n        };\n      }\n      this.constraints = {\n        video: videoContstraints,\n        audio: false\n      }\n    },\n    getDevices: async function() {\n      if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\n        console.log(\"enumerateDevices() not supported.\");\n        return;\n      }\n      try {\n        let allDevices = await navigator.mediaDevices.enumerateDevices();\n        for (let mediaDevice of allDevices) {\n          // console.log(\"enumerate\", mediaDevice);\n          if (mediaDevice.kind === \"videoinput\") {\n            let option = {};\n            option.text = mediaDevice.label;\n            option.value = mediaDevice.deviceId;\n            this.options.push(option);\n            this.devices.push(mediaDevice);\n          }\n        }\n        //default if only one\n\n        if (this.options.length < 3)\n          this.selectedDevice = this.options[1].value;\n      } catch (err) {\n        console.log(\"getDevices\", err);\n      }\n      console.log(\"devices\", this.devices);\n    }\n  },\n  // props:['cloudname','preset'],\n  // created: function() {\n  //   this.$parent.$on(\"update-ls\", function(payload) {\n  //     this.cloudname = payload.cloudname\n  //     this.preset = payload.preset\n  //   });\n  //},\n  mounted() {\n    //get cloudname and preset from local storage\n    // this.cloudname = Vue.ls.get(\"cloudname\")\n    // this.preset = Vue.ls.get(\"preset\")\n    //if these aren't set don't allow upload\n\n    console.log(\"camera mounted cloudname\", this.settings.cloudname);\n    this.canvas = document.querySelector(\"canvas\");\n    this.video = document.querySelector(\"video\");\n    this.options.push({ text: \"Select Device\", value: 0 });\n    this.getDevices();\n    this.setConstraints();\n    this.getMedia();\n    this.isStartEnabled = false;\n  }\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nbutton:disabled {\n  background: gray;\n}\nselect option:disabled {\n  color: gray;\n  font-weight: bold;\n}\nselect {\n  margin: 0.2rem 0;\n}\n\n@media only screen and (max-width: 400px) {\n  button {\n    font-size: 0.6rem;\n  }\n}\n</style>\n","<template>\n  <div class=\"home\">\n    <camera></camera>\n  </div>\n</template>\n\n<script>\nimport Camera from \"@/components/Camera.vue\";\nexport default {\n  name: \"Home\",\n  data() {\n    return {\n      // cloudname: \"\",\n      // preset: \"\"\n    };\n  },\n  components: {\n    camera: Camera\n  },\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n"]}