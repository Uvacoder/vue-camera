{"version":3,"sources":["webpack:///src/src/App.vue","app.60166d8a.css","webpack:///src/components/src/components/Camera.vue"],"names":[],"mappings":"AAqKA,KACA,oDAAA,CACA,kCAAA,CACA,iCAAA,CACA,iBAAA,CACA,aCnKA,CDqKA,WACA,UCnKA,CDsKA,YACA,cCpKA,CDuKA,cACA,UCpKA,CDuKA,MACA,wBCrKA,CC6QA,iCACA,kBAAA,CACA,UDzQA,CC2QA,wCACA,aAAA,CACA,eDzQA,CC2QA,sBACA,UDzQA,CC4QA,yCACA,mCACA,aAAA,CACA,2BAAA,CACA,aAAA,CACA,SD1QA,CACA","file":"app.60166d8a.css","sourcesContent":["<template>\n  <div id=\"app\">\n    <b-container>\n      <b-row>\n        <b-col sm=\"12\">\n          <b-nav>\n            <b-nav-item>\n              <router-link to=\"/\">Camera</router-link>\n            </b-nav-item>\n            <b-nav-item>\n              <router-link to=\"/gallery\">Gallery</router-link>\n            </b-nav-item>\n\n            <b-nav-item>\n              <div class=\"settings\" v-b-modal.modal-prevent-closing>\n                <i class=\"fas fa-cog\"></i>\n              </div>\n\n              <b-modal\n                id=\"modal-prevent-closing\"\n                ref=\"modal\"\n                title=\"Cloudinary Upload Info\"\n                @show=\"resetModal\"\n                @hidden=\"resetModal\"\n                @ok=\"handleOk\"\n              >\n                <form ref=\"form\" @submit.stop.prevent=\"updateSettings\">\n                  <b-form-group\n                    :state=\"cloudnameState\"\n                    label=\"Cloudname\"\n                    label-for=\"cloud-name-input\"\n                    invalid-feedback=\"Cloudname is required\"\n                  >\n                    <b-form-input\n                      id=\"cloud-name-input\"\n                      v-model=\"cloudname\"\n                      :state=\"cloudnameState\"\n                      required\n                    ></b-form-input>\n                  </b-form-group>\n                  <b-form-group\n                    :state=\"presetState\"\n                    label=\"Preset\"\n                    label-for=\"preset-input\"\n                    invalid-feedback=\"Preset is required\"\n                  >\n                    <b-form-input id=\"preset-input\" v-model=\"preset\" :state=\"presetState\" required></b-form-input>\n                  </b-form-group>\n                  <b-form-group>\n                    <b-form-checkbox\n                      id=\"clearsettings\"\n                      v-model=\"clearsettings\"\n                      name=\"clearsettings\"\n                      value=\"true\"\n                      unchecked-value=\"false\"\n                    >Clear Settings</b-form-checkbox>\n                  </b-form-group>\n                </form>\n              </b-modal>\n              <!-- </div> -->\n            </b-nav-item>\n          </b-nav>\n        </b-col>\n      </b-row>\n      <b-row>\n        <b-col sm=\"12\">\n          <router-view></router-view>\n        </b-col>\n      </b-row>\n    </b-container>\n  </div>\n</template>\n\n<script>\nimport { mapState } from \"vuex\";\nimport { mapActions } from \"vuex\";\n\nexport default {\n  name: \"app\",\n  created: function() {\n    console.log(\"App created\", this.cloudname, this.preset);\n    if (this.$ls.get(\"cloudname\")) {\n      this.cloudname = this.$ls.get(\"cloudname\");\n      // console.log(\"App.vue cloudname\", this.cloudname);\n    }\n    if (this.$ls.get(\"preset\")) {\n      this.preset = this.$ls.get(\"preset\");\n    }\n  },\n  data() {\n    return {\n      // cloudname: \"\",\n      cloudnameState: null,\n      // preset: \"\",\n      presetState: null,\n      clearsettings: \"false\",\n      expire: 3600000\n    };\n  },\n  // computed: mapState(['settings']),\n  computed: {\n    cloudname: {\n      get() {\n        return this.$store.state.settings.cloudname;\n      },\n      set(value) {\n        this.$store.commit(\"updateCloudname\", value);\n      }\n    },\n    preset: {\n      get() {\n        return this.$store.state.settings.preset;\n      },\n      set(value) {\n        this.$store.commit(\"updatePreset\", value);\n      }\n    }\n  },\n  methods: {\n    checkFormValidity() {\n      // const valid = this.$refs.form.checkValidity();\n      // this.cloudnameState = valid ? \"valid\" : \"invalid\";\n      // return valid;\n      return true;\n    },\n    resetModal() {\n      this.cloudnameState = null;\n      this.presetState = null;\n    },\n    handleOk(bvModalEvt) {\n      // Prevent modal from closing\n      bvModalEvt.preventDefault();\n      // Trigger submit handler\n      this.handleSubmit();\n    },\n    handleSubmit() {\n      //clear local storage and return\n      if (this.clearsettings === \"true\") {\n        this.cloudname = \"\";\n        this.preset = \"\";\n        this.clearsettings = \"false\";\n        // remove from local storage\n        this.$ls.clear();\n        this.$nextTick(() => {\n          this.$refs.modal.hide();\n        });\n        return;\n      } else {\n        // Exit when the form isn't valid\n        if (!this.checkFormValidity()) {\n          console.log(\"settings data not valid\");\n          return;\n        }\n      }\n\n      // Hide the modal manually\n      this.$nextTick(() => {\n        this.$refs.modal.hide();\n      });\n    }\n  }\n};\n</script>\n\n<style>\n#app {\n  font-family: \"Roboto\", \"Avenir\", Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n}\na.settings {\n  color: black;\n}\n\n.settings i {\n  font-size: 1rem;\n}\n\n.nav-item a a {\n  color: black;\n  /* font-size: 1.5rem; */\n}\ninput {\n  text-transform: lowercase;\n}\n</style>\n","\n#app {\n  font-family: \"Roboto\", \"Avenir\", Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n}\na.settings {\n  color: black;\n}\n.settings i {\n  font-size: 1rem;\n}\n.nav-item a a {\n  color: black;\n  /* font-size: 1.5rem; */\n}\ninput {\n  text-transform: lowercase;\n}\n\n\nbutton[data-v-13441cc8]:disabled {\n  background: lightgray;\n  color: black;\n}\nselect option[data-v-13441cc8]:disabled {\n  color: lightgray;\n  font-weight: bold;\n}\nform[data-v-13441cc8] {\n  margin: 1em;\n}\n@media only screen and (min-width: 600px) {\n.btn-group button[data-v-13441cc8] {\n    margin: 0 0.5em;\n    border-radius: 1em !important;\n    font-size: 1em;\n    width: 6em;\n}\n}\n\n\n/*# sourceMappingURL=app.60166d8a.css.map*/","<template>\n  <div class=\"camera\">\n     <!-- <p>Camera State:{{cameraState}}</p> -->\n    <b-row>\n      <b-col sm=\"12\">\n        <div class=\"actions\">\n          <b-button-group>\n            <b-button v-if=\"!cameraState\" :disabled=\"isStartEnabled\" v-on:click=\"start\">Camera</b-button>\n            <b-button v-if=\"cameraState\" :disabled=\"isStartEnabled\" v-on:click=\"stop\">Stop</b-button>\n            <b-button v-if=\"cameraState\" :disabled=\"isStartEnabled\" v-on:click=\"snapshot\">Snapsot</b-button>\n            <b-button v-if=\"isPhoto\" :disabled=\"!isPhoto\" v-on:click=\"download\">Download</b-button>\n            <div v-if=\"isPhoto\" v-b-tooltip.hover title=\"Settings are required to upload photos.\">\n              <b-button\n                :disabled=\"!isPhoto || settings.cloudname.length === 0 || settings.preset.length === 0\"\n                v-on:click=\"upload\"\n                v-if=\"isPhoto\"\n              >Upload</b-button>\n            </div>\n          </b-button-group>\n        </div>\n      </b-col>\n    </b-row>\n    <b-row>\n      <b-col sm=\"12\">\n        <form class>\n          <b-form-select\n            v-model=\"selectedDevice\"\n            :options=\"options\"\n            v-on:change=\"deviceChange()\"\n            size=\"sm\"\n          ></b-form-select>\n        </form>\n      </b-col>\n    </b-row>\n\n    <b-row>\n      <b-col sm=\"12\">\n        <div>\n          <video v-show=\"cameraState\" playsinline autoplay></video>\n          <canvas v-show=\"!cameraState\"></canvas>\n        </div>\n      </b-col>\n    </b-row>\n  </div>\n</template>\n\n<script>\n// https://cloudinary.com/documentation/image_upload_api_reference\n// https://codepen.io/team/Cloudinary/pen/Edxjbj\n// https://support.cloudinary.com/hc/en-us/articles/209754169-Is-it-possible-to-upload-directly-to-Cloudinary-using-pure-Javascript-code-\nasync function uploadToCloudinary(cloudName, preset, fileData) {\n  try {\n    let fd = new FormData();\n    let url = `https://api.cloudinary.com/v1_1/${cloudName}/image/upload`;\n    console.log(url);\n    fd.append(\"upload_preset\", preset);\n    fd.append(\"tags\", \"browser_upload\"); // Optional - add tag for image admin in Cloudinary\n    fd.append(\"file\", fileData);\n    let res = await axios({\n      method: \"post\",\n      url: url,\n      data: fd\n    });\n    return await res.data;\n  } catch (err) {\n    console.log(\"error upload:\", err);\n    throw err;\n  }\n}\n\n// import cloudinary from \"cloudinary-core\"\nimport axios from \"axios\";\nimport { mapState } from \"vuex\";\n\nexport default {\n  name: \"Camera\",\n  data() {\n    return {\n      video: null,\n      canvas: null,\n      fileData: null,\n      isStartEnabled: true,\n      isPhoto: false,\n      stream: null,\n      currentStream: null,\n      devices: [],\n      options: [],\n      constraints: {},\n      selectedDevice: null,\n      cameraState: true\n    };\n  },\n  computed: mapState([\"settings\"]),\n  methods: {\n    upload: function() {\n      console.log(\"upload\");\n\n      if (\n        this.settings.cloudname.length === 0 ||\n        this.settings.preset.length === 0\n      ) {\n        console.log(\"error: upload missing cloudname or preset\");\n        this.$bvToast.toast(\n          `Upload to Cloudinary unsuccessful: use settings to provide cloudname and preset`,\n          {\n            title: \"Cloudinary Upload\",\n            autoHideDelay: 5000,\n            appendToast: false\n          }\n        );\n        return;\n      }\n      uploadToCloudinary(\n        this.settings.cloudname,\n        this.settings.preset,\n        this.fileData\n      )\n        .then(result => {\n          console.log(result);\n          this.$bvToast.toast(`Upload to Cloudinary successful`, {\n            title: \"Cloudinary Upload\",\n            autoHideDelay: 5000,\n            appendToast: false\n          });\n        })\n        .catch(err => {\n          this.$bvToast.toast(\n            `Upload to Cloudinary unsuccessful. Check settings.`,\n            {\n              title: \"Cloudinary Upload\",\n              autoHideDelay: 5000,\n              appendToast: false\n            }\n          );\n        });\n    },\n    snapshot: function() {\n      console.log(\"snapshot\");\n      this.canvas.width = this.video.videoWidth;\n      this.canvas.height = this.video.videoHeight;\n      this.canvas\n        .getContext(\"2d\")\n        .drawImage(this.video, 0, 0, this.canvas.width, this.canvas.height);\n      this.fileData = this.canvas.toDataURL(\"image/jpeg\");\n      this.isPhoto = true;\n      this.cameraState = false;\n    },\n    stop: function() {\n      console.log(\"stop\");\n      this.video.pause();\n      if (this.currentStream) {\n        this.currentStream.getTracks().forEach(track => {\n          track.stop();\n        });\n        this.video.srcObject = null\n      }\n\n      this.video.removeAttribute(\"src\")\n      this.video.load()\n      this.canvas\n        .getContext(\"2d\")\n        .clearRect(0, 0, this.canvas.width, this.canvas.height);\n      // this.isStartEnabled = true;\n      this.isPhoto = false;\n      this.cameraState = false;\n      console.log(\"end stop\",this.cameraState)\n    },\n    start: function() {\n      console.log(\"start\");\n      this.stop();\n      //when starting up again use first option\n      this.selectedDevice = this.options[0].value;\n      this.getMedia().then(result => {\n        this.isStartEnabled = false;\n        this.cameraState = true;\n      });\n    },\n    download: function() {\n      console.log(\"downlaod\");\n      if (this.fileData) {\n        console.log(\"download\");\n        this.canvas.width = this.video.videoWidth;\n        this.canvas.height = this.video.videoHeight;\n        this.canvas\n          .getContext(\"2d\")\n          .drawImage(this.video, 0, 0, this.canvas.width, this.canvas.height);\n        let a = document.createElement(\"a\");\n        a.href = this.fileData;\n        a.textContent = \"photo\";\n        a.target = \"_blank\";\n        a.download = \"photo.jpeg\";\n        document.querySelector(\"body\").append(a);\n        a.click();\n      }\n    },\n    getMedia: async function() {\n      try {\n        this.stream = await navigator.mediaDevices.getUserMedia(\n          this.constraints\n        );\n        window.stream = this.stream;\n        this.currentStream = stream;\n        this.video.srcObject = stream;\n        return true;\n      } catch (err) {\n        throw err;\n        console.log(\"getmedia\", err);\n      }\n    },\n    deviceChange: function() {\n      this.stop();\n      //don't change selected device\n      this.setConstraints();\n      this.getMedia().then(result => {\n        this.isStartEnabled = false;\n        this.cameraState = true;\n      });\n    },\n    setConstraints: function() {\n      const videoContstraints = {};\n      //set selected to highest option\n      // this.selectedDevice = this.options[this.options.length - 1].value;\n     \n      if (this.selectedDevice === null) {\n        videoContstraints.facingMode = \"environment\";\n      } else {\n        videoContstraints.deviceId = {\n          exact: this.selectedDevice\n        };\n      }\n       alert(\"vc.facingmode\",videoContstraints.facingMode)\n              alert(\"vc.deviceId\"+JSON.stringify(videoContstraints.deviceId))\n\n      this.constraints = {\n        video: videoContstraints,\n        audio: false\n      };\n    },\n    getDevices: async function() {\n      if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\n        console.log(\"enumerateDevices() not supported.\");\n        alert(\"enumerate not supported\")\n        return false;\n      }\n      try {\n        let allDevices = await navigator.mediaDevices.enumerateDevices();\n        alert(\"all devices\"+JSON.stringify(allDevices))\n        for (let mediaDevice of allDevices) {\n          // console.log(\"enumerate\", mediaDevice)\n          if (mediaDevice.kind === \"videoinput\") {\n            let option = {};\n            option.text = mediaDevice.label;\n            option.value = mediaDevice.deviceId;\n            this.options.push(option);\n            this.devices.push(mediaDevice);\n          }\n        }\n        return true;\n      } catch (err) {\n        console.log(\"getDevices\", err);\n        throw err;\n      }\n      console.log(\"devices\", this.devices);\n    }\n  },\n  mounted() {\n    console.log(\"camera mounted cloudname\", this.settings.cloudname);\n    this.canvas = document.querySelector(\"canvas\");\n    this.video = document.querySelector(\"video\");\n    // this.options.push({ text: \"Select Device\", value: \"\", disable: true });\n    this.getDevices()\n      .then(res => {\n        //when first loaded selected device can use 1st option\n        this.selectedDevice = this.options[0].value;\n        alert(\"selectedDevice\"+this.selectedDevice)\n        this.setConstraints();\n      })\n      .then(res => {\n        alert(\"getmedia\"+JSON.stringify(this.constraints))\n        this.getMedia().then(res => {\n          this.isStartEnabled = false;\n        });\n      });\n  }\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nbutton:disabled {\n  background: lightgray;\n  color: black;\n}\nselect option:disabled {\n  color: lightgray;\n  font-weight: bold;\n}\nform {\n  margin: 1em;\n}\n\n@media only screen and (min-width: 600px) {\n  .btn-group button {\n    margin: 0 0.5em;\n    border-radius: 1em !important;\n    font-size: 1em;\n    width: 6em;\n  }\n}\n</style>\n"]}